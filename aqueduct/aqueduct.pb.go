// Code generated by protoc-gen-go.
// source: aqueduct.proto
// DO NOT EDIT!

/*
Package aqueduct is a generated protocol buffer package.

It is generated from these files:
	aqueduct.proto

It has these top-level messages:
	FileRequest
	CreateSymLinkRequest
	FileResponse
	GetBuildAttrRequest
	SetBuildAttrRequest
	BuildAttrResponse
	CleanCacheRequest
	CleanCacheResponse
*/
package aqueduct

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The Request message containing information about the file
type FileRequest struct {
	Path     string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *FileRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CreateSymLinkRequest struct {
	Target     string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	OriginFile string `protobuf:"bytes,2,opt,name=origin_file,json=originFile" json:"origin_file,omitempty"`
}

func (m *CreateSymLinkRequest) Reset()                    { *m = CreateSymLinkRequest{} }
func (m *CreateSymLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSymLinkRequest) ProtoMessage()               {}
func (*CreateSymLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateSymLinkRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *CreateSymLinkRequest) GetOriginFile() string {
	if m != nil {
		return m.OriginFile
	}
	return ""
}

// The Response for when a file was built
type FileResponse struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *FileResponse) Reset()                    { *m = FileResponse{} }
func (m *FileResponse) String() string            { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()               {}
func (*FileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileResponse) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type GetBuildAttrRequest struct {
}

func (m *GetBuildAttrRequest) Reset()                    { *m = GetBuildAttrRequest{} }
func (m *GetBuildAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildAttrRequest) ProtoMessage()               {}
func (*GetBuildAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetBuildAttrRequest struct {
	Folder  string `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Flavor  string `protobuf:"bytes,3,opt,name=flavor" json:"flavor,omitempty"`
	Clean   bool   `protobuf:"varint,4,opt,name=clean" json:"clean,omitempty"`
}

func (m *SetBuildAttrRequest) Reset()                    { *m = SetBuildAttrRequest{} }
func (m *SetBuildAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBuildAttrRequest) ProtoMessage()               {}
func (*SetBuildAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetBuildAttrRequest) GetFolder() string {
	if m != nil {
		return m.Folder
	}
	return ""
}

func (m *SetBuildAttrRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SetBuildAttrRequest) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *SetBuildAttrRequest) GetClean() bool {
	if m != nil {
		return m.Clean
	}
	return false
}

type BuildAttrResponse struct {
	Folder  string `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Flavor  string `protobuf:"bytes,3,opt,name=flavor" json:"flavor,omitempty"`
	Clean   bool   `protobuf:"varint,4,opt,name=clean" json:"clean,omitempty"`
}

func (m *BuildAttrResponse) Reset()                    { *m = BuildAttrResponse{} }
func (m *BuildAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildAttrResponse) ProtoMessage()               {}
func (*BuildAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuildAttrResponse) GetFolder() string {
	if m != nil {
		return m.Folder
	}
	return ""
}

func (m *BuildAttrResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BuildAttrResponse) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *BuildAttrResponse) GetClean() bool {
	if m != nil {
		return m.Clean
	}
	return false
}

type CleanCacheRequest struct {
}

func (m *CleanCacheRequest) Reset()                    { *m = CleanCacheRequest{} }
func (m *CleanCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*CleanCacheRequest) ProtoMessage()               {}
func (*CleanCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CleanCacheResponse struct {
}

func (m *CleanCacheResponse) Reset()                    { *m = CleanCacheResponse{} }
func (m *CleanCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*CleanCacheResponse) ProtoMessage()               {}
func (*CleanCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*FileRequest)(nil), "aqueduct.FileRequest")
	proto.RegisterType((*CreateSymLinkRequest)(nil), "aqueduct.CreateSymLinkRequest")
	proto.RegisterType((*FileResponse)(nil), "aqueduct.FileResponse")
	proto.RegisterType((*GetBuildAttrRequest)(nil), "aqueduct.GetBuildAttrRequest")
	proto.RegisterType((*SetBuildAttrRequest)(nil), "aqueduct.SetBuildAttrRequest")
	proto.RegisterType((*BuildAttrResponse)(nil), "aqueduct.BuildAttrResponse")
	proto.RegisterType((*CleanCacheRequest)(nil), "aqueduct.CleanCacheRequest")
	proto.RegisterType((*CleanCacheResponse)(nil), "aqueduct.CleanCacheResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aqueduct service

type AqueductClient interface {
	BuildFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	CreateSymLink(ctx context.Context, in *CreateSymLinkRequest, opts ...grpc.CallOption) (*FileResponse, error)
	SetBuildAttributes(ctx context.Context, in *SetBuildAttrRequest, opts ...grpc.CallOption) (*BuildAttrResponse, error)
	GetBuildAttributes(ctx context.Context, in *GetBuildAttrRequest, opts ...grpc.CallOption) (*BuildAttrResponse, error)
	CleanCache(ctx context.Context, in *CleanCacheRequest, opts ...grpc.CallOption) (*CleanCacheResponse, error)
}

type aqueductClient struct {
	cc *grpc.ClientConn
}

func NewAqueductClient(cc *grpc.ClientConn) AqueductClient {
	return &aqueductClient{cc}
}

func (c *aqueductClient) BuildFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/BuildFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aqueductClient) DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aqueductClient) CreateSymLink(ctx context.Context, in *CreateSymLinkRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/CreateSymLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aqueductClient) SetBuildAttributes(ctx context.Context, in *SetBuildAttrRequest, opts ...grpc.CallOption) (*BuildAttrResponse, error) {
	out := new(BuildAttrResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/SetBuildAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aqueductClient) GetBuildAttributes(ctx context.Context, in *GetBuildAttrRequest, opts ...grpc.CallOption) (*BuildAttrResponse, error) {
	out := new(BuildAttrResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/GetBuildAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aqueductClient) CleanCache(ctx context.Context, in *CleanCacheRequest, opts ...grpc.CallOption) (*CleanCacheResponse, error) {
	out := new(CleanCacheResponse)
	err := grpc.Invoke(ctx, "/aqueduct.Aqueduct/CleanCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aqueduct service

type AqueductServer interface {
	BuildFile(context.Context, *FileRequest) (*FileResponse, error)
	DeleteFile(context.Context, *FileRequest) (*FileResponse, error)
	CreateSymLink(context.Context, *CreateSymLinkRequest) (*FileResponse, error)
	SetBuildAttributes(context.Context, *SetBuildAttrRequest) (*BuildAttrResponse, error)
	GetBuildAttributes(context.Context, *GetBuildAttrRequest) (*BuildAttrResponse, error)
	CleanCache(context.Context, *CleanCacheRequest) (*CleanCacheResponse, error)
}

func RegisterAqueductServer(s *grpc.Server, srv AqueductServer) {
	s.RegisterService(&_Aqueduct_serviceDesc, srv)
}

func _Aqueduct_BuildFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).BuildFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/BuildFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).BuildFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aqueduct_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).DeleteFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aqueduct_CreateSymLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).CreateSymLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/CreateSymLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).CreateSymLink(ctx, req.(*CreateSymLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aqueduct_SetBuildAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBuildAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).SetBuildAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/SetBuildAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).SetBuildAttributes(ctx, req.(*SetBuildAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aqueduct_GetBuildAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).GetBuildAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/GetBuildAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).GetBuildAttributes(ctx, req.(*GetBuildAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aqueduct_CleanCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AqueductServer).CleanCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aqueduct.Aqueduct/CleanCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AqueductServer).CleanCache(ctx, req.(*CleanCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aqueduct_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aqueduct.Aqueduct",
	HandlerType: (*AqueductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildFile",
			Handler:    _Aqueduct_BuildFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Aqueduct_DeleteFile_Handler,
		},
		{
			MethodName: "CreateSymLink",
			Handler:    _Aqueduct_CreateSymLink_Handler,
		},
		{
			MethodName: "SetBuildAttributes",
			Handler:    _Aqueduct_SetBuildAttributes_Handler,
		},
		{
			MethodName: "GetBuildAttributes",
			Handler:    _Aqueduct_GetBuildAttributes_Handler,
		},
		{
			MethodName: "CleanCache",
			Handler:    _Aqueduct_CleanCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aqueduct.proto",
}

func init() { proto.RegisterFile("aqueduct.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6b, 0xea, 0x50,
	0x10, 0x7d, 0x79, 0xfa, 0x7c, 0x71, 0xf4, 0x3d, 0x70, 0xfc, 0x20, 0xa4, 0x5f, 0x72, 0x57, 0xae,
	0x5c, 0xb4, 0xdb, 0x76, 0x61, 0x2d, 0x15, 0xa1, 0x50, 0x88, 0x74, 0x5d, 0x62, 0x1c, 0xf5, 0xd2,
	0x34, 0x57, 0x6f, 0x6e, 0x84, 0xfe, 0xc0, 0xfe, 0xaf, 0x92, 0x9b, 0xc4, 0xc4, 0x2a, 0x42, 0x0b,
	0xdd, 0xcd, 0x99, 0x3b, 0x73, 0xe6, 0xe8, 0x39, 0x81, 0xff, 0xee, 0x3a, 0xa2, 0x59, 0xe4, 0xa9,
	0xfe, 0x4a, 0x0a, 0x25, 0xd0, 0xcc, 0x30, 0x7b, 0x82, 0xda, 0x3d, 0xf7, 0xc9, 0xa1, 0x75, 0x44,
	0xa1, 0x42, 0x84, 0xf2, 0xca, 0x55, 0x4b, 0xcb, 0xe8, 0x1a, 0xbd, 0xaa, 0xa3, 0x6b, 0xec, 0x40,
	0x45, 0xb9, 0x72, 0x41, 0xca, 0xfa, 0xad, 0xbb, 0x29, 0x42, 0x1b, 0x4c, 0x4f, 0x04, 0x8a, 0x02,
	0x15, 0x5a, 0xa5, 0xae, 0xd1, 0xab, 0x3b, 0x5b, 0xcc, 0x1e, 0xa1, 0x35, 0x94, 0xe4, 0x2a, 0x9a,
	0xbc, 0xbd, 0x3e, 0xf0, 0xe0, 0x25, 0xe3, 0xcf, 0xb9, 0x8c, 0x1d, 0xae, 0x0b, 0xa8, 0x09, 0xc9,
	0x17, 0x3c, 0x78, 0x9e, 0x73, 0x9f, 0xd2, 0x43, 0x90, 0xb4, 0x62, 0x7d, 0x8c, 0x41, 0x3d, 0xd1,
	0x19, 0xae, 0x44, 0x10, 0x52, 0x2c, 0x54, 0x4f, 0xa6, 0x42, 0xe3, 0x9a, 0xb5, 0xa1, 0x39, 0x22,
	0x75, 0x1b, 0x71, 0x7f, 0x36, 0x50, 0x4a, 0xa6, 0x37, 0x59, 0x04, 0xcd, 0xc9, 0x7e, 0x3b, 0x96,
	0x32, 0x17, 0xfe, 0x8c, 0x64, 0x26, 0x25, 0x41, 0x68, 0xc1, 0xdf, 0x0d, 0xc9, 0x90, 0x8b, 0x20,
	0x95, 0x91, 0x41, 0xbd, 0xe1, 0xbb, 0x1b, 0x21, 0xf5, 0xcf, 0x8d, 0x37, 0x34, 0xc2, 0x16, 0xfc,
	0xf1, 0x7c, 0x72, 0x03, 0xab, 0xdc, 0x35, 0x7a, 0xa6, 0x93, 0x00, 0x16, 0x42, 0xa3, 0x70, 0x33,
	0x95, 0xfd, 0xd3, 0x47, 0x9b, 0xd0, 0x18, 0xc6, 0xc5, 0xd0, 0xf5, 0x96, 0x99, 0xa9, 0xac, 0x05,
	0x58, 0x6c, 0x26, 0x52, 0x2e, 0xdf, 0x4b, 0x60, 0x0e, 0xd2, 0x18, 0xe0, 0x35, 0x54, 0xb5, 0xd8,
	0xf8, 0x3f, 0xc6, 0x76, 0x7f, 0x1b, 0x97, 0x42, 0x36, 0xec, 0xce, 0xe7, 0x76, 0x42, 0xc4, 0x7e,
	0xe1, 0x0d, 0xc0, 0x1d, 0xf9, 0xa4, 0xe8, 0x7b, 0xeb, 0x63, 0xf8, 0xb7, 0x13, 0x16, 0x3c, 0xcf,
	0x47, 0x0f, 0xa5, 0xe8, 0x08, 0x95, 0x03, 0x58, 0xf4, 0x9a, 0x4f, 0x23, 0x45, 0x21, 0x9e, 0xe5,
	0xf3, 0x07, 0x92, 0x60, 0x9f, 0xe4, 0xcf, 0x7b, 0x8e, 0x25, 0x9c, 0xa3, 0xa3, 0x9c, 0xa3, 0xaf,
	0x73, 0x8e, 0x01, 0x72, 0x4b, 0xb0, 0x30, 0xbc, 0xe7, 0x9e, 0x7d, 0x7a, 0xf8, 0x31, 0xa3, 0x9a,
	0x56, 0xf4, 0x27, 0x7d, 0xf5, 0x11, 0x00, 0x00, 0xff, 0xff, 0xae, 0x66, 0x2a, 0xea, 0xe4, 0x03,
	0x00, 0x00,
}
